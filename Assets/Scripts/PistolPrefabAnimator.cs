using UnityEngine;

namespace ShootingSystem
{
    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑ pistol prefab —á–µ—Ä–µ–∑ Unity Animator
    /// </summary>
    public class PistolPrefabAnimator : MonoBehaviour
    {
        [Header("Animation Settings")]
        [SerializeField] private Animator pistolAnimator;
        [SerializeField] private Animation pistolAnimation;
        [SerializeField] private SimplePistolAnimator simpleAnimator;
        [SerializeField] private RuntimeAnimationLoader runtimeLoader;
        
        [Header("Animation States")]
        [SerializeField] private string idleState = "Idle";
        [SerializeField] private string shootingState = "Shooting";
        [SerializeField] private string reloadingState = "Reloading";
        
        private void Start()
        {
            Debug.Log("üé¨ PistolPrefabAnimator Start() called");
            FindPistolAnimator();
            FindRuntimeLoader();
            InitializeSimpleAnimator();
            Debug.Log("üé¨ PistolPrefabAnimator initialization complete");
        }
        
        private void FindPistolAnimator()
        {
            // –ò—â–µ–º Animator –≤ Pistol Instance
            GameObject pistolInstance = GameObject.Find("Pistol Instance");
            if (pistolInstance != null)
            {
                pistolAnimator = pistolInstance.GetComponent<Animator>();
                if (pistolAnimator == null)
                {
                    // –ò—â–µ–º Animator –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
                    pistolAnimator = pistolInstance.GetComponentInChildren<Animator>();
                }
                
                if (pistolAnimator != null)
                {
                    Debug.Log("‚úÖ Found pistol Animator! Available parameters:");
                    LogAnimatorParameters();
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è No Animator found in pistol prefab. Using fallback animations.");
                }
            }
            else
            {
                Debug.LogError("‚ùå Pistol Instance not found!");
            }
        }
        
        private void FindRuntimeLoader()
        {
            // –ò—â–µ–º RuntimeAnimationLoader –≤ —Å—Ü–µ–Ω–µ
            runtimeLoader = FindFirstObjectByType<RuntimeAnimationLoader>();
            if (runtimeLoader != null)
            {
                Debug.Log("‚úÖ Found RuntimeAnimationLoader!");
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è RuntimeAnimationLoader not found!");
            }
        }
        
        private void InitializeSimpleAnimator()
        {
            // –ò—â–µ–º Pistol Instance
            GameObject pistolInstance = GameObject.Find("Pistol Instance");
            if (pistolInstance == null)
            {
                Debug.LogError("‚ùå Pistol Instance not found!");
                return;
            }

            // –ò—â–µ–º Simple Animator
            simpleAnimator = pistolInstance.GetComponent<SimplePistolAnimator>();
            if (simpleAnimator == null)
            {
                simpleAnimator = pistolInstance.AddComponent<SimplePistolAnimator>();
                Debug.Log("‚úÖ Added SimplePistolAnimator for animations");
            }
        }
        
        private void LogAnimatorParameters()
        {
            if (pistolAnimator == null) return;
            
            Debug.Log("üé¨ Animator Parameters:");
            foreach (AnimatorControllerParameter param in pistolAnimator.parameters)
            {
                Debug.Log($"  - {param.name} ({param.type})");
            }
        }
        
        private void LogAnimationClips()
        {
            if (pistolAnimation == null) return;
            
            Debug.Log("üé¨ Animation Clips:");
            foreach (AnimationState state in pistolAnimation)
            {
                if (state.clip != null)
                {
                    Debug.Log($"  - {state.clip.name} (Duration: {state.clip.length}s)");
                }
            }
        }
        
        /// <summary>
        /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã—Å—Ç—Ä–µ–ª–∞
        /// </summary>
        public void PlayShootingAnimation()
        {
            Debug.Log("üé¨ PlayShootingAnimation called!");
            Debug.Log($"üé¨ pistolAnimation: {pistolAnimation != null}");
            Debug.Log($"üé¨ pistolAnimator: {pistolAnimator != null}");
            Debug.Log($"üé¨ simpleAnimator: {simpleAnimator != null}");
            Debug.Log($"üé¨ runtimeLoader: {runtimeLoader != null}");
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RuntimeAnimationLoader
            if (runtimeLoader != null)
            {
                Debug.Log("üé¨ Using RuntimeAnimationLoader for shooting...");
                runtimeLoader.PlayShootingAnimation();
                return;
            }
            
            // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Animation –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            if (pistolAnimation != null)
            {
                Debug.Log("üé¨ Using Animation component for shooting...");
                if (pistolAnimation.GetClip("Shoot") != null)
                {
                    var clip = pistolAnimation.GetClip("Shoot");
                    if (clip != null) clip.wrapMode = WrapMode.Once;
                    var state = pistolAnimation["Shoot"];
                    if (state != null) state.wrapMode = WrapMode.Once;
                    pistolAnimation.Stop("Shoot");
                    pistolAnimation.Play("Shoot");
                    Debug.Log("‚úÖ Playing 'Shoot' animation via Animation component");
                    return;
                }
                else if (pistolAnimation.GetClip("Shooting") != null)
                {
                    var clip = pistolAnimation.GetClip("Shooting");
                    if (clip != null) clip.wrapMode = WrapMode.Once;
                    var state = pistolAnimation["Shooting"];
                    if (state != null) state.wrapMode = WrapMode.Once;
                    pistolAnimation.Stop("Shooting");
                    pistolAnimation.Play("Shooting");
                    Debug.Log("‚úÖ Playing 'Shooting' animation via Animation component");
                    return;
                }
                else if (pistolAnimation.GetClip("Pistol_FIRE") != null)
                {
                    var clip = pistolAnimation.GetClip("Pistol_FIRE");
                    if (clip != null) clip.wrapMode = WrapMode.Once;
                    var state = pistolAnimation["Pistol_FIRE"];
                    if (state != null) state.wrapMode = WrapMode.Once;
                    pistolAnimation.Stop("Pistol_FIRE");
                    pistolAnimation.Play("Pistol_FIRE");
                    Debug.Log("‚úÖ Playing 'Pistol_FIRE' animation via Animation component");
                    return;
                }
            }
            
            // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º Animator
            if (pistolAnimator != null)
            {
                
                if (HasParameter("Shoot"))
                {
                    pistolAnimator.SetTrigger("Shoot");
                    Debug.Log("‚úÖ Triggered 'Shoot' parameter");
                    return;
                }
                else if (HasParameter("Fire"))
                {
                    pistolAnimator.SetTrigger("Fire");
                    Debug.Log("‚úÖ Triggered 'Fire' parameter");
                    return;
                }
                else if (HasParameter("Pistol_FIRE"))
                {
                    pistolAnimator.SetTrigger("Pistol_FIRE");
                    Debug.Log("‚úÖ Triggered 'Pistol_FIRE' parameter");
                    return;
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è No suitable animation parameters found in Animator");
                }
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Simple Animator
            if (simpleAnimator != null)
            {
                Debug.Log("üé¨ Using Simple Animator for shooting...");
                simpleAnimator.PlayShootingAnimation();
                Debug.Log("‚úÖ Playing shooting animation via Simple Animator");
                return;
            }
            
            // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            Debug.LogWarning("‚ö†Ô∏è No ready animations found, using fallback animation");
            StartCoroutine(PlayFallbackShootingAnimation());
        }

        /// <summary>
        /// Play shooting once, stopping previous state if needed. Returns true and outputs duration if known.
        /// </summary>
        public bool TryPlayShootingOnce(out float duration)
        {
            duration = 0f;
            // Prefer Animation component with explicit clip
            if (pistolAnimation != null)
            {
                AnimationClip clip = pistolAnimation.GetClip("Pistol_FIRE")
                    ?? pistolAnimation.GetClip("Shoot")
                    ?? pistolAnimation.GetClip("Shooting");
                if (clip != null)
                {
                    clip.wrapMode = WrapMode.Once;
                    var state = pistolAnimation[clip.name];
                    if (state != null) state.wrapMode = WrapMode.Once;
                    pistolAnimation.Stop(clip.name);
                    pistolAnimation.Play(clip.name);
                    duration = clip.length;
                    return true;
                }
            }
            // Runtime loader
            if (runtimeLoader != null && runtimeLoader.HasAnimation("Pistol_FIRE"))
            {
                runtimeLoader.PlayAnimation("Pistol_FIRE");
                var list = runtimeLoader.GetLoadedClips();
                var found = list.Find(c => c != null && c.name == "Pistol_FIRE");
                if (found != null) duration = found.length;
                if (duration <= 0f) duration = 0.75f;
                return true;
            }
            // Animator as last resort - can't get duration reliably
            if (pistolAnimator != null && (HasParameter("Shoot") || HasParameter("Fire") || HasParameter("Pistol_FIRE")))
            {
                if (HasParameter("Shoot")) pistolAnimator.SetTrigger("Shoot");
                else if (HasParameter("Fire")) pistolAnimator.SetTrigger("Fire");
                else pistolAnimator.SetTrigger("Pistol_FIRE");
                duration = 0.75f;
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// Play reload once, stopping previous state if needed. Returns true and outputs duration if known.
        /// </summary>
        public bool TryPlayReloadOnce(out float duration)
        {
            duration = 0f;
            if (pistolAnimation != null)
            {
                var clip = pistolAnimation.GetClip("Pistol_RELOAD") ?? pistolAnimation.GetClip("Reload");
                if (clip != null)
                {
                    clip.wrapMode = WrapMode.Once;
                    var state = pistolAnimation[clip.name];
                    if (state != null) state.wrapMode = WrapMode.Once;
                    pistolAnimation.Stop(clip.name);
                    pistolAnimation.Play(clip.name);
                    duration = clip.length;
                    return true;
                }
            }
            if (runtimeLoader != null && runtimeLoader.HasAnimation("Pistol_RELOAD"))
            {
                runtimeLoader.PlayAnimation("Pistol_RELOAD");
                var list = runtimeLoader.GetLoadedClips();
                var found = list.Find(c => c != null && c.name == "Pistol_RELOAD");
                if (found != null) duration = found.length;
                if (duration <= 0f) duration = 1.0f;
                return true;
            }
            if (pistolAnimator != null && HasParameter("Reload"))
            {
                pistolAnimator.SetTrigger("Reload");
                duration = 1.0f;
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
        /// </summary>
        public void PlayReloadAnimation()
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Simple Animator
            if (simpleAnimator != null)
            {
                Debug.Log("üîÑ Using Simple Animator for reload...");
                simpleAnimator.PlayReloadAnimation();
                Debug.Log("‚úÖ Playing reload animation via Simple Animator");
                return;
            }
            
            // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            Debug.LogWarning("‚ö†Ô∏è No Simple Animator found, using fallback animation");
            StartCoroutine(PlayFallbackReloadAnimation());
        }
        
        /// <summary>
        /// –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞—Ç–≤–æ—Ä–∞ –Ω–∞–∑–∞–¥
        /// </summary>
        public void PlaySlideBackAnimation()
        {
            if (pistolAnimator == null) return;
            
            if (HasParameter("SlideBack"))
            {
                pistolAnimator.SetTrigger("SlideBack");
                Debug.Log("‚úÖ Triggered 'SlideBack' parameter");
            }
            else if (HasParameter("SlideBack"))
            {
                pistolAnimator.SetTrigger("SlideBack");
                Debug.Log("‚úÖ Triggered 'SlideBack' parameter");
            }
        }
        
        /// <summary>
        /// –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞—Ç–≤–æ—Ä–∞ –≤–ø–µ—Ä–µ–¥
        /// </summary>
        public void PlaySlideForwardAnimation()
        {
            if (pistolAnimator == null) return;
            
            if (HasParameter("SlideForward"))
            {
                pistolAnimator.SetTrigger("SlideForward");
                Debug.Log("‚úÖ Triggered 'SlideForward' parameter");
            }
            else if (HasParameter("SlideForward"))
            {
                pistolAnimator.SetTrigger("SlideForward");
                Debug.Log("‚úÖ Triggered 'SlideForward' parameter");
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ Animator
        /// </summary>
        private bool HasParameter(string parameterName)
        {
            if (pistolAnimator == null) return false;
            
            foreach (AnimatorControllerParameter param in pistolAnimator.parameters)
            {
                if (param.name == parameterName)
                    return true;
            }
            return false;
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        /// </summary>
        public string GetCurrentAnimationState()
        {
            if (pistolAnimator == null) return "No Animator";
            
            AnimatorStateInfo stateInfo = pistolAnimator.GetCurrentAnimatorStateInfo(0);
            return stateInfo.IsName(idleState) ? "Idle" : 
                   stateInfo.IsName(shootingState) ? "Shooting" : 
                   stateInfo.IsName(reloadingState) ? "Reloading" : "Unknown";
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–≥—Ä–∞–µ—Ç –ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è
        /// </summary>
        public bool IsAnimating()
        {
            if (pistolAnimator == null) return false;
            
            AnimatorStateInfo stateInfo = pistolAnimator.GetCurrentAnimatorStateInfo(0);
            return stateInfo.normalizedTime < 1.0f;
        }
        
        /// <summary>
        /// Fallback –∞–Ω–∏–º–∞—Ü–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞ (–ø—Ä–æ—Å—Ç–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ slide)
        /// </summary>
        private System.Collections.IEnumerator PlayFallbackShootingAnimation()
        {
            Debug.Log("üé¨ Playing fallback shooting animation...");
            
            // –ù–∞—Ö–æ–¥–∏–º slide –≤ pistol instance
            GameObject pistolInstance = GameObject.Find("Pistol Instance");
            if (pistolInstance == null) yield break;
            
            Transform slide = FindTransformByName(pistolInstance.transform, "slide");
            if (slide == null) yield break;
            
            Vector3 startPos = slide.localPosition;
            Vector3 endPos = startPos + Vector3.back * 1.0f; // Slide –Ω–∞–∑–∞–¥ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
            
            Debug.Log($"üé¨ Fallback slide animation: {startPos} -> {endPos}");
            
            // –ê–Ω–∏–º–∞—Ü–∏—è slide –Ω–∞–∑–∞–¥
            float duration = 0.2f;
            float elapsed = 0f;
            
            while (elapsed < duration)
            {
                elapsed += Time.deltaTime;
                float t = elapsed / duration;
                slide.localPosition = Vector3.Lerp(startPos, endPos, t);
                yield return null;
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            yield return new WaitForSeconds(0.1f);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è slide –≤–ø–µ—Ä–µ–¥
            elapsed = 0f;
            while (elapsed < duration)
            {
                elapsed += Time.deltaTime;
                float t = elapsed / duration;
                slide.localPosition = Vector3.Lerp(endPos, startPos, t);
                yield return null;
            }
            
            Debug.Log("üé¨ Fallback shooting animation completed!");
        }
        
        /// <summary>
        /// Fallback –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏
        /// </summary>
        private System.Collections.IEnumerator PlayFallbackReloadAnimation()
        {
            Debug.Log("üîÑ Playing fallback reload animation...");
            
            // –ù–∞—Ö–æ–¥–∏–º —á–∞—Å—Ç–∏ –ø–∏—Å—Ç–æ–ª–µ—Ç–∞
            GameObject pistolInstance = GameObject.Find("Pistol Instance");
            if (pistolInstance == null) yield break;
            
            Transform slide = FindTransformByName(pistolInstance.transform, "slide");
            Transform magazine = FindTransformByName(pistolInstance.transform, "mag");
            
            if (slide != null)
            {
                // –ê–Ω–∏–º–∞—Ü–∏—è slide –Ω–∞–∑–∞–¥ –∏ –≤–ø–µ—Ä–µ–¥
                Vector3 slideStart = slide.localPosition;
                Vector3 slideEnd = slideStart + Vector3.back * 1.2f; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                
                // Slide –Ω–∞–∑–∞–¥
                float duration = 0.3f;
                float elapsed = 0f;
                while (elapsed < duration)
                {
                    elapsed += Time.deltaTime;
                    float t = elapsed / duration;
                    slide.localPosition = Vector3.Lerp(slideStart, slideEnd, t);
                    yield return null;
                }
                
                yield return new WaitForSeconds(0.2f);
                
                // Slide –≤–ø–µ—Ä–µ–¥
                elapsed = 0f;
                while (elapsed < duration)
                {
                    elapsed += Time.deltaTime;
                    float t = elapsed / duration;
                    slide.localPosition = Vector3.Lerp(slideEnd, slideStart, t);
                    yield return null;
                }
            }
            
            Debug.Log("üîÑ Fallback reload animation completed!");
        }
        
        private Transform FindTransformByName(Transform parent, string name)
        {
            if (parent.name == name)
                return parent;
                
            foreach (Transform child in parent)
            {
                Transform found = FindTransformByName(child, name);
                if (found != null)
                    return found;
            }
            
            return null;
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–π
        /// </summary>
        [ContextMenu("Test Shooting Animation")]
        public void TestShootingAnimation() => PlayShootingAnimation();
        
        [ContextMenu("Test Reload Animation")]
        public void TestReloadAnimation() => PlayReloadAnimation();
        
        [ContextMenu("Test Slide Back")]
        public void TestSlideBack() => PlaySlideBackAnimation();
        
        [ContextMenu("Test Slide Forward")]
        public void TestSlideForward() => PlaySlideForwardAnimation();
    }
}
